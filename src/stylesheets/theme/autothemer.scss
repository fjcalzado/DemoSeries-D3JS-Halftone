@import "./_theme.collection.scss";

/**
 * Themify API. Generates themed rules for given properties following
 * predefined values in a theme collection.
 * @mixin {themify}
 * @param {List} $properties: Properties to themify.
 * @param {List} $keys: Theme items to map properies against to.
 * @param {Bool} $inverted: Write selector with inverted logic.
 */
@mixin themify($properties, $keys, $invertSelector: false) {
  // Iterate over the themes.
  @each $theme, $themeItem in $themeCollection {
    // Create a selector THEME -> CLASS. Note how selector is written
    // to avoid webpack hashed names confusion. Instead of ' .class & '
    // (which it would be detected by webpack and hashed), use query format.
    @if $invertSelector {
      &[class="theme-#{$theme}"] {
        @include applySingleTheme($themeItem, $properties, $keys);
      }
    }

    @else {
      [class="theme-#{$theme}"] & {
        @include applySingleTheme($themeItem, $properties, $keys);
      }
    }
  }
}

/**
 * Themify Helper mixin.
 */
@mixin applySingleTheme($themeItem, $properties, $keys) {
  // Iterate over each property-key value for the given theme.
  @for $i from 1 through length($properties) {
    $property: nth($properties, $i);
    $key: nth($keys, $i);

    #{$property}: map-get($themeItem, $key);
  }
}

/**
 * Device specific media query helper.
 * @param $device: device type out of [small, medium, large].
 */
$mobileBreakpoint: 600px;
$tabletBreakpoint: 992px;

@mixin respond-to($device) {
  @if $device == small {
    @media screen and (max-width: $mobileBreakpoint) { @content; }
  }

  @else if $device == medium {
    @media screen and (min-width: $mobileBreakpoint + 1) and (max-width: $tabletBreakpoint) { @content; }
  }

  @else if $device == large {
    @media screen and (min-width: $tabletBreakpoint + 1) { @content; }
  }
}
